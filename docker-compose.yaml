version: "3.9"

services:
  # <<-- NGINX -->>
  nginx:
    depends_on:
      - app
      - recommendation-ms
      - user-ms
      - watchlist-ms
      - analytics-ms
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - 3000:3000

  # <<-- FRONTEND -->>
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    env_file:
      ./app/.env
    environment:
      - REACT_APP_RECOMMENDATION_MS=/recommendation-ms
      - REACT_APP_USER_MS=/user-ms
      - REACT_APP_WATCHLIST_MS=/watchlist-ms
      - REACT_APP_ANALYTICS_MS=/analytics-ms

  # <<-- BACKEND -->>
  user-ms:
    build: ./backend/user-ms/
    restart: unless-stopped
    depends_on:
      user-db:
        condition: service_healthy
    links:
     - user-db

  user-db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: 1111
      MYSQL_HOST: "used-db"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-P", "3306"]
      interval: 10s
      timeout: 30s
      retries: 5


  watchlist-ms:
    build:
      context: ./backend/watchlist-ms/
      dockerfile: ../../fastapi.dockerfile
  watchlist-db:
    image: cassandra:latest
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - CASSANDRA_SEEDS=watch-next-watchlist-db-1,watch-next-watchlist-db-2
    scale: 2

  watchlist-db-setuper:
    image: cassandra:latest
    depends_on:
      watchlist-db:
        condition:
          service_healthy
    restart: "no"

    entrypoint: ["/setup_watchlist-db.sh"]
    volumes:
      - ./scripts/create_tables.cql:/create_tables.cql
      - ./scripts/setup_watchlist-db.sh:/setup_watchlist-db.sh

  analytics-ms:
    build:
      context: ./backend/analytics-ms/
      dockerfile: ../../fastapi.dockerfile
    depends_on:
      analytics-db:
        condition: service_healthy
    environment:
      MONGO_CLUSTER: mongoCluster
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      N_MONGO_INSTANCES: 2

  analytics-db:
    image: mongo:latest
    restart: always
    networks:
      - mongo
    #volumes:
    #  - mongo-data:/data/db
    #  - mongo-configdb:/data/configdb
    environment:
      MONGO_CLUSTER: mongoCluster
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGODB_DATABASE: flaskdb
      MONGODB_HOSTNAME: mongodb
    healthcheck:
      #test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  recommendation-ms:
    build: ./backend/recommendation-ms
    depends_on:
      - neo4j
    environment:
      - NEO4J_HOST=neo4j
      - NEO4J_PORT=7687
      - NEO4J_USERNAME=myusername
      - NEO4J_PASSWORD=mypassword
      - TMDB_API_KEY=9be9f81b03a97c8ad1b8a4a41fb190bd
      - TMDB_API_ENDPOINT=https://api.themoviedb.org/3

  neo4j:
    image: neo4j:latest
    environment:
      - NEO4J_AUTH=neo4j/mypassword

  zookeeper-server:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka-server:
    image: bitnami/kafka:latest
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-server:2181
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka-server:9092" ]
      interval: 5s
      timeout: 10s
      retries: 10
    depends_on:
      - zookeeper-server

  setup-kafka:
    image: bitnami/kafka:latest
    depends_on:
      kafka-server:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --list --bootstrap-server kafka-server:9092

      echo 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka-server:9092 --create --if-not-exists --topic activity-trail --replication-factor 1 --partitions 3


      echo 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka-server:9092 --list
      "
networks:
  mongo:
    name: mongoCluster
    driver: bridge