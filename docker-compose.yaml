version: "3.9"

services:
  # <<-- NGINX -->>
  nginx:
    depends_on:
      - app
      - movie-search-ms
      - recommendation-ms
      - user-ms
      - watchlist-ms
      - analytics-ms
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - 3000:3000

  # <<-- FRONTEND -->>
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    env_file:
      ./app/.env
    environment:
      - REACT_APP_MOVIE_SEARCH_MS=/movie-search-ms
      - REACT_APP_RECOMMENDATION_MS=/recommendation-ms
      - REACT_APP_USER_MS=/user-ms
      - REACT_APP_WATCHLIST_MS=/watchlist-ms
      - REACT_APP_ANALYTICS_MS=/analytics-ms

  # <<-- BACKEND -->>
  movie-search-ms:
    build:
      context: ./backend/movie-search-ms/
      dockerfile: ../../fastapi.dockerfile

  recommendation-ms:
    build:
      context: ./backend/recommendation-ms/
      dockerfile: ../../fastapi.dockerfile
  recommendation-db:
    image: neo4j:latest

  user-ms:
    build:
      context: ./backend/user-ms/
      dockerfile: ../../fastapi.dockerfile
  user-db:
    image: mysql:latest

  watchlist-ms:
    build:
      context: ./backend/watchlist-ms/
      dockerfile: ../../fastapi.dockerfile
  watchlist-db:
    image: cassandra:latest
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 5
  watchlist-db-setuper:
    image: cassandra:latest
    depends_on:
      watchlist-db:
        condition:
          service_healthy
    restart: "no"
    entrypoint: ["/setup_watchlist-db.sh"]
    volumes:
      - ./scripts/create_tables.cql:/create_tables.cql
      - ./scripts/setup_watchlist-db.sh:/setup_watchlist-db.sh

  analytics-ms:
    build:
      context: ./backend/analytics-ms/
      dockerfile: ../../fastapi.dockerfile
  analytics-db:
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017

  recommendation-ms:
    build: ./backend/recommendation-ms
    ports:
      - "80:80"
    depends_on:
      - neo4j
    environment:
      - NEO4J_HOST=neo4j
      - NEO4J_PORT=7687
      - NEO4J_USERNAME=myusername
      - NEO4J_PASSWORD=mypassword
      - TMDB_API_KEY=9be9f81b03a97c8ad1b8a4a41fb190bd
      - TMDB_API_ENDPOINT=https://api.themoviedb.org/3

  neo4j:
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/mypassword
